{"version":3,"sources":["utils/anagram.js","Anagram/Anagram.js","App.js","serviceWorker.js","index.js"],"names":["compare","firstString","secondString","toLowerCase","split","sort","join","replace","Anagram","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","setState","isAnagram","value","state","_this2","react_default","a","createElement","className","type","placeholder","ref","input","onClick","size","src","Component","App","src_Anagram_Anagram","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4LAAaA,EAAU,SAACC,EAAaC,GACjC,OAAKD,GAAgBC,EACdD,EAAYE,cAAcC,MAAM,IAAIC,OAAOC,KAAK,IAAIC,QAAQ,MAAO,MACpEL,EAAaC,cAAcC,MAAM,IAAIC,OAAOC,KAAK,IAAIC,QAAQ,MAAO,IAFhC,MCqD/BC,qBA/Cb,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAMRT,QAAU,WACRU,EAAKO,SAAS,CACZC,UAAWlB,EAAQU,EAAKT,YAAYkB,MAAOT,EAAKR,aAAaiB,UAP/DT,EAAKU,MAAQ,CACXF,UAAW,MAHIR,wEAaV,IAAAW,EAAAR,KACP,OACIS,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SAAf,WAGAH,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,SAAOE,KAAK,OAAOC,YAAY,eAAeF,UAAU,QAAQG,IAAK,SAAAC,GAAK,OAAIR,EAAKpB,YAAc4B,MAEnGP,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,SAAOE,KAAK,OAAOC,YAAY,gBAAgBF,UAAU,QAAQG,IAAK,SAAAC,GAAK,OAAIR,EAAKnB,aAAe2B,MAErGP,EAAAC,EAAAC,cAAA,UAAQM,QAASjB,KAAKb,QAASyB,UAAU,aAAzC,SACEH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,KAAKM,KAAK,MAC1BT,EAAAC,EAAAC,cAAA,YAC4B,IAAzBX,KAAKO,MAAMF,UACVI,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WAAWO,IAAI,uDAC9BV,EAAAC,EAAAC,cAAA,kCAEA,MACsB,IAAzBX,KAAKO,MAAMF,UACVI,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UAAUO,IAAI,6DAC7BV,EAAAC,EAAAC,cAAA,qCAEA,cAxCIS,cCKPC,MARf,WACE,OACEZ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAACW,EAAD,QCMcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOpB,EAAAC,EAAAC,cAACmB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.b3cfeca5.chunk.js","sourcesContent":["export const compare = (firstString, secondString) => {\r\n    if (!firstString || !secondString) return null;\r\n    return firstString.toLowerCase().split('').sort().join('').replace(/\\s/g, \"\")\r\n      === secondString.toLowerCase().split('').sort().join('').replace(/\\s/g, \"\");\r\n  };","import React, { Component } from 'react';\r\n\r\nimport { compare } from '../utils/anagram';\r\n\r\nimport './anagram.css';\r\n\r\nclass Anagram extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      isAnagram: null,\r\n    };\r\n  }\r\n\r\n  compare = () => {\r\n    this.setState({\r\n      isAnagram: compare(this.firstString.value, this.secondString.value),\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n        <div className=\"anagram\">\r\n            <div className=\"title\">\r\n                Anagram\r\n            </div>\r\n            <div>\r\n              <input type=\"text\" placeholder=\"First String\" className=\"field\" ref={input => this.firstString = input} />\r\n            </div>\r\n            <div>\r\n              <input type=\"text\" placeholder=\"Second String\" className=\"field\" ref={input => this.secondString = input} />\r\n            </div>\r\n            <button onClick={this.compare} className=\"check-btn\">CHECK</button>\r\n              <hr className=\"hr\" size=\"2\"/>\r\n            <div>\r\n              {this.state.isAnagram === true ? (\r\n                <div className=\"result\">\r\n                  <img className=\"icon-yes\" src=\"https://img.icons8.com/ios-glyphs/35/000000/ok.png\" />\r\n                  <span>It is an anagram!</span>\r\n                </div>\r\n              ) : null}\r\n              {this.state.isAnagram === false ? (\r\n                <div className=\"result\">\r\n                  <img className=\"icon-no\" src=\"https://img.icons8.com/ios/30/000000/cancel-2-filled.png\" />\r\n                  <span>It isn't an anagram!</span>\r\n                </div>\r\n              ) : null}\r\n            </div>\r\n        </div>\r\n    );\r\n  }\r\n}\r\n\r\n\r\nexport default Anagram;\r\n","import React from 'react';\nimport Anagram from \"./Anagram/Anagram\"\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Anagram />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}